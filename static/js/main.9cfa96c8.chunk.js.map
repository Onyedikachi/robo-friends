{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","App.js","store/actions.js","store/types.js","serviceWorker.js","store/reducers.js","index.js"],"names":["Card","url","this","props","id","className","alt","src","name","email","Component","CardList","robotCards","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","setState","Header","nextProps","nextState","App","onRequestRobots","searchField","isPending","filteredRobots","filter","toLowerCase","includes","onSearchChange","React","connect","searchRobots","requestRobots","dispatch","e","payload","target","value","fetch","then","res","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","store","createStore","combineReducers","action","Object","assign","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9cfa96c8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Card extends Component {\r\n    render(){\r\n        const url = `https://robohash.org/${this.props.id}?200x200`;\r\n        return (\r\n            <div className='bg-light-green dib br3 pa3 ma2 bw2 shadow-5 grow'>\r\n                <img alt='robots' src = {url}/>\r\n                <div>\r\n                    <h2>{this.props.name}</h2>\r\n                    <p>{this.props.email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nexport const CardList = (props) => {\r\n    const robotCards =  props.robots.map((robot, i)=><Card key={i} id={robot.id} name={robot.name} email={robot.email}/>);\r\n    return (\r\n        <div>\r\n            {robotCards}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange = {searchChange}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =  (props)=>{\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true});\r\n    }\r\n    render(){\r\n        return this.state.hasError ? \r\n        <h1>OOoops. That is not good</h1>: this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n\r\n    render(){\r\n        return <h1 className='f1'>RoboFriends</h1>\r\n    }\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { CardList } from \"./components/CardList\";\nimport SearchBox  from \"./components/SearchBox\";\nimport './App.css';\nimport Scroll from './components/Scroll';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport Header from './components/Header';\n\nimport { setSearchField, requestRobots } from './store/actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (e) => dispatch(setSearchField(e.target.value)),\n    onRequestRobots: (e) => requestRobots(dispatch)\n  } \n}\n\nclass App extends  React.Component {\n\n  componentDidMount(){\n    this.props.onRequestRobots();\n  }\n\n  render(){\n    const {searchField, robots, isPending} =  this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    if (isPending){\n      return <h1>Loading</h1>\n    }else{\n      return (\n        <div className='tc'>\n          <Header />\n          <SearchBox  searchChange = {this.props.onSearchChange}/>\n          <div className=\"App0\">\n            <Scroll>\n              <ErrorBoundary>\n                <CardList robots = {filteredRobots} />\n              </ErrorBoundary>\n            </Scroll>\n          </div>\n        </div>\n      );\n    }\n  } \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as Types from './types';\r\n\r\nexport const setSearchField =  (text) =>({\r\n    type: Types.setFieldChanged,\r\n    payload: text\r\n});\r\n\r\nexport const  requestRobots = (dispatch)=>{\r\n    dispatch({ type: Types.requestRobotsPending});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(users => dispatch({type: Types.requestRobotsSuccess, payload: users}))\r\n    .catch(error => dispatch({type: Types.requestRobotsFailed, payload: error}))\r\n}","export const setFieldChanged = 'CHANGE_SEARCH_FIELD';\r\nexport const requestRobotsFailed = 'REQUEST_ROBOTS_FAILED';\r\nexport const requestRobotsSuccess = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const requestRobotsPending = 'REQUEST_ROBOTS_PENDING';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as Types from './types';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch,action={}) => {\r\n    switch (action.type) {\r\n        case Types.setFieldChanged:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type){\r\n        case Types.requestRobotsPending:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case Types.requestRobotsSuccess:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case Types.requestRobotsFailed:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger }  from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport { searchRobots, requestRobots } from \"./store/reducers\";\n\nconst logger = createLogger();\nconst store = createStore(combineReducers({searchRobots, requestRobots}), applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n     <App/>\n    </Provider>.\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}